"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findAddress = void 0;
const axios_1 = __importDefault(require("axios"));
const __1 = require("..");
const findAddress = (idStr, apiKey, chain, fallbackToDefault = true) => __awaiter(void 0, void 0, void 0, function* () {
    return new Promise((resolve, reject) => __awaiter(void 0, void 0, void 0, function* () {
        try {
            const backendURL = (0, __1.getBackendUrl)().idUrl;
            let res;
            res = yield (0, axios_1.default)({
                method: 'GET',
                url: `${backendURL}/id/find_address/`,
                params: {
                    id: idStr,
                    chain: chain,
                    fallback_to_default: fallbackToDefault
                },
                headers: {
                    "x-api-key": apiKey
                }
            });
            const address = yield res.data;
            resolve(address);
        }
        catch (e) {
            if (e && e.response && e.response.status) {
                const statusCode = e.response.status;
                const statusText = e.response.data ? e.response.data : `API responded with status ${statusCode}`;
                reject(new __1.ApiError(JSON.stringify(statusText), statusCode));
            }
            reject(new __1.ApiError("API Responded with status 400", 400));
        }
    }));
});
exports.findAddress = findAddress;
