"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getToken = exports.getTokenByName = exports.getTokens = exports.getChains = exports.getChain = exports.chainData = void 0;
const chain_json_1 = __importDefault(require("../chain.json"));
const tokens_1 = require("../tokens");
exports.chainData = chain_json_1.default;
const getChain = (params) => {
    if (!params.internalId && !params.chainId) {
        throw "either send internalId or chainId";
    }
    if (params.internalId) {
        return exports.chainData.find(chain => chain.internalId === params.internalId);
    }
    else {
        return exports.chainData.find(chain => chain.chainId === params.chainId);
    }
};
exports.getChain = getChain;
const getChains = () => {
    return exports.chainData;
};
exports.getChains = getChains;
const getTokens = (internalId) => {
    if (!internalId) {
        return tokens_1.tokens;
    }
    return tokens_1.tokens[internalId];
};
exports.getTokens = getTokens;
const getTokenByName = (name, chain) => {
    const tokens = (0, exports.getTokens)(Number(chain));
    return tokens.find((t) => t.symbol === name);
};
exports.getTokenByName = getTokenByName;
const getToken = (address, chain) => {
    const allTokens = tokens_1.tokens[chain];
    return allTokens.find((token) => token.address.toLowerCase() === address.toLowerCase());
};
exports.getToken = getToken;
__exportStar(require("./getInternalChainId"), exports);
